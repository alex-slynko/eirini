// Code generated by counterfeiter. DO NOT EDIT.
package oci_registryfakes

import (
	"bytes"
	"sync"

	"code.cloudfoundry.org/eirini/oci_registry"
)

type FakeImageManager struct {
	GetManifestStub        func(string, string) ([]byte, error)
	getManifestMutex       sync.RWMutex
	getManifestArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getManifestReturns struct {
		result1 []byte
		result2 error
	}
	getManifestReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	GetLayerStub        func(string, string) (*bytes.Buffer, error)
	getLayerMutex       sync.RWMutex
	getLayerArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getLayerReturns struct {
		result1 *bytes.Buffer
		result2 error
	}
	getLayerReturnsOnCall map[int]struct {
		result1 *bytes.Buffer
		result2 error
	}
	HasStub        func(digest string) bool
	hasMutex       sync.RWMutex
	hasArgsForCall []struct {
		digest string
	}
	hasReturns struct {
		result1 bool
	}
	hasReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImageManager) GetManifest(arg1 string, arg2 string) ([]byte, error) {
	fake.getManifestMutex.Lock()
	ret, specificReturn := fake.getManifestReturnsOnCall[len(fake.getManifestArgsForCall)]
	fake.getManifestArgsForCall = append(fake.getManifestArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetManifest", []interface{}{arg1, arg2})
	fake.getManifestMutex.Unlock()
	if fake.GetManifestStub != nil {
		return fake.GetManifestStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getManifestReturns.result1, fake.getManifestReturns.result2
}

func (fake *FakeImageManager) GetManifestCallCount() int {
	fake.getManifestMutex.RLock()
	defer fake.getManifestMutex.RUnlock()
	return len(fake.getManifestArgsForCall)
}

func (fake *FakeImageManager) GetManifestArgsForCall(i int) (string, string) {
	fake.getManifestMutex.RLock()
	defer fake.getManifestMutex.RUnlock()
	return fake.getManifestArgsForCall[i].arg1, fake.getManifestArgsForCall[i].arg2
}

func (fake *FakeImageManager) GetManifestReturns(result1 []byte, result2 error) {
	fake.GetManifestStub = nil
	fake.getManifestReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeImageManager) GetManifestReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.GetManifestStub = nil
	if fake.getManifestReturnsOnCall == nil {
		fake.getManifestReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getManifestReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeImageManager) GetLayer(arg1 string, arg2 string) (*bytes.Buffer, error) {
	fake.getLayerMutex.Lock()
	ret, specificReturn := fake.getLayerReturnsOnCall[len(fake.getLayerArgsForCall)]
	fake.getLayerArgsForCall = append(fake.getLayerArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetLayer", []interface{}{arg1, arg2})
	fake.getLayerMutex.Unlock()
	if fake.GetLayerStub != nil {
		return fake.GetLayerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getLayerReturns.result1, fake.getLayerReturns.result2
}

func (fake *FakeImageManager) GetLayerCallCount() int {
	fake.getLayerMutex.RLock()
	defer fake.getLayerMutex.RUnlock()
	return len(fake.getLayerArgsForCall)
}

func (fake *FakeImageManager) GetLayerArgsForCall(i int) (string, string) {
	fake.getLayerMutex.RLock()
	defer fake.getLayerMutex.RUnlock()
	return fake.getLayerArgsForCall[i].arg1, fake.getLayerArgsForCall[i].arg2
}

func (fake *FakeImageManager) GetLayerReturns(result1 *bytes.Buffer, result2 error) {
	fake.GetLayerStub = nil
	fake.getLayerReturns = struct {
		result1 *bytes.Buffer
		result2 error
	}{result1, result2}
}

func (fake *FakeImageManager) GetLayerReturnsOnCall(i int, result1 *bytes.Buffer, result2 error) {
	fake.GetLayerStub = nil
	if fake.getLayerReturnsOnCall == nil {
		fake.getLayerReturnsOnCall = make(map[int]struct {
			result1 *bytes.Buffer
			result2 error
		})
	}
	fake.getLayerReturnsOnCall[i] = struct {
		result1 *bytes.Buffer
		result2 error
	}{result1, result2}
}

func (fake *FakeImageManager) Has(digest string) bool {
	fake.hasMutex.Lock()
	ret, specificReturn := fake.hasReturnsOnCall[len(fake.hasArgsForCall)]
	fake.hasArgsForCall = append(fake.hasArgsForCall, struct {
		digest string
	}{digest})
	fake.recordInvocation("Has", []interface{}{digest})
	fake.hasMutex.Unlock()
	if fake.HasStub != nil {
		return fake.HasStub(digest)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.hasReturns.result1
}

func (fake *FakeImageManager) HasCallCount() int {
	fake.hasMutex.RLock()
	defer fake.hasMutex.RUnlock()
	return len(fake.hasArgsForCall)
}

func (fake *FakeImageManager) HasArgsForCall(i int) string {
	fake.hasMutex.RLock()
	defer fake.hasMutex.RUnlock()
	return fake.hasArgsForCall[i].digest
}

func (fake *FakeImageManager) HasReturns(result1 bool) {
	fake.HasStub = nil
	fake.hasReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeImageManager) HasReturnsOnCall(i int, result1 bool) {
	fake.HasStub = nil
	if fake.hasReturnsOnCall == nil {
		fake.hasReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.hasReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeImageManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getManifestMutex.RLock()
	defer fake.getManifestMutex.RUnlock()
	fake.getLayerMutex.RLock()
	defer fake.getLayerMutex.RUnlock()
	fake.hasMutex.RLock()
	defer fake.hasMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImageManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ oci_registry.ImageManager = new(FakeImageManager)
